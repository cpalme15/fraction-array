import java.util.*;


public class Test1 {
	static int index =7;
	public static void main(String[] args) {
	
		Fraction f=new Fraction(6,7);
		Fraction g=new Fraction(2,4);
		Fraction h=new Fraction(3,4);
		Fraction j=new Fraction(3,18);
		Fraction k=new Fraction(1,8);
		Fraction l=new Fraction(10,20);
		Fraction m=new Fraction(2,6);
		Fraction[] F1=new Fraction[index];
		
		F1[0]=f;
		F1[1]=g;
		F1[2]=h;
		F1[3]=j;
		F1[4]=k;
		F1[5]=l;
		F1[6]=m;
		
		sort(F1);
		
	
		
		for(Fraction element:copyOf(F1,F1.length-2))
		{
			System.out.println(element);
		}
		
		Fraction unreduced=new Fraction();
				unreduced=((add(copyOf(F1,F1.length-2))));
		
		
		
		}

	

	



	public static Fraction add (Fraction[] g)
	{ 
		Fraction total=new Fraction();
		int x=0;
		for(int i=0;i<g.length-1;i++)
		{ 
			
			total.setdemo(g[i].getdemo() * g[i+1].getdemo());
			total.setnum((g[i].getnum() * g[i+1].getdemo() + (g[i+1].getnum() * g[i].getdemo())));
			
		}
	return total;
	   }
	      
	
	public static Fraction [] move(Fraction [] f)
	{
		
		for(int i=0;i<f.length-1;i++)
		{
			f[i]=f[i+1];
		}
		
		
		return f;
	}
	public static Fraction[] copyOf(Fraction[] original, int newLength) { 
		   Fraction[] copy = new Fraction[newLength]; 
		   move(original);
		   System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength)); 
		   return copy; 
		}

	

	public static void sort(Fraction[] s)
 {
	int i=0,j=0;
	int smallest=0;
	for(i=0;i<s.length-1;i++)
	{
		smallest=i;
		for(j=i+1;j<s.length;j++)
		{
			if(s[j].convert()<s[smallest].convert())
				smallest=j;
		}
		//swap'
		Fraction temp=s[i];
		s[i]=s[smallest];
		s[smallest]=temp;
	}
	
}
	
	}
