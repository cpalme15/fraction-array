

public class Fraction {
private int num;
private int demo;
private double ratioValue;



		public Fraction()		//default
		{ num=1;
		demo=1;
	
		}
		public Fraction(int n, int d)		//overload
		{
			setnum(n);
			setdemo(d);
	
		}
		public void setnum(int n)
		{
			num=n;
		}
		public int getnum()
		{
			return num;
		}
		public void setdemo(int d){
			demo=d;
		}
		public int getdemo()
		{
			return demo;
		}
		public boolean isEqual(Fraction f)
		{
			return num==f.num && demo==f.demo;
		}
		

		  public Fraction add(Fraction b)
		   {
		      int common = lcd(demo, b.demo);
		      Fraction sum = new Fraction();
		      Fraction A = new Fraction();
		      Fraction B = new Fraction();
		      A = convert1(common);
		      B = b.convert1(common);
		      sum.num = A.num + B.num;
		      sum.demo = common;
		      sum = sum.reduce();
		      return sum;
		   }
		  private int lcd(int denom1, int denom2)
		   {
		      int factor = denom1;
		      while ((denom1 % denom2) != 0)
		         denom1 += factor;
		      return denom1;
		   }
@Override
	public boolean equals(Object temp)// override
		{ if (temp == null)
			return false;
				if (temp instanceof Fraction)
				{
						if (this.num==((Fraction)temp).num
						&& this.demo==((Fraction)temp).demo)
							return true;
	
				}
			return false;

		}
@Override
public  String toString()
		{
			return num+"/"+demo;
		}
	public void display() 
	{
		System.out.println(num + " / "+demo);
	
	}
	private static  int gcd(int n,int d){
		int z=0;
		while (n!=0&&d!=0)
		{
				z=n;
				n=d%n;
				d=z;
		}
		return n+d;
	}

	public Fraction reduce(){
		int g=0;
		
		g=gcd(num,demo);
		int nnum=num/=g;
		int ndemo=demo/=g;
		Fraction n =new Fraction(nnum,ndemo);
		return n ;
	
	}
	public float convert()
	{
		return(float)this.num/this.demo;
		
	} 
	private Fraction convert1(int common)
	   {
	      Fraction result = new Fraction();
	      int factor = common / demo;
	      result.num = num * factor;
	      result.demo = common;
	      return result;
	   }
	
	
	public boolean isGreater(Fraction f)
	{
		if(this.convert()>f.convert())
			return true;
		else
			return false;
	}

	}
